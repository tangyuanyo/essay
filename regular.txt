非打印字符：
\cx  匹配由x指明的控制字符
\f    匹配一个换页符
\n  匹配一个换行符
\r 匹配一个回车符
\s 匹配任何空白字符
\S 匹配任何非空白字符
\t  匹配一个制表符
\v 匹配一个垂直制表符

特殊字符
$ 匹配结尾
() 标记子表达式的开始和结束位置
* 匹配前面的子表达式0次或者多次
+ 一次或者多次
. 除了换行符\n 之外的任何单字符
[ 标记一个中括号表达式的开始
？ 0次或者1次
\ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符
^ 开始
{ 限定符表达式的开始
| 指明两项之间的一个选择

限定符
* 0次或者多次
+ 一次或者多次
？0次或者一次
{n} n次
{n,} 至少n次
{n,m} 至少匹配n而且最多m

贪婪：.*
非贪婪：.*?

定位符
^ 开始
$ 结束
\b 匹配一个字边界，即字与空格间的位置
\B 非字边界

选择
用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。
非捕获元：?：     ？=      ？！

反向引用
缓冲区编号从1开始  最多99  可以用\n访问 n为缓冲区

元字符
\  将下一个字符标记为特殊字符
^ 开始
$ 结束
* 0次或者多次
+ 一次或者多次
？零次或者一次
{n} n次
{n} 至少n次
{n,m} n-m次
？ 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。
.  匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用像"(.|\n)"的模式
(pattern) 匹配pattern并获取这一匹配
(?:pattern)  匹配pattern但不获取这一匹配
(？=pattern) 正向预查
(？！pattern) 正向否定预查
(?<=pattern) 反向肯定预查
(?<!pattern) 反向否定预查
x|y 匹配其中一个
[xyz] 匹配其中任何一个
[^xyz] 匹配不在这个集合中的字符
[a-z] 匹配指定范围内的字符
[^a-z] 不在这个范围内的字符
\b 单词边界
\B 非单词边界
\cx 匹配由x指明的控制字符
\d 数字字符 = [0-9]
\D 非数字字符  = [^0-9]
\f 换页符
\n 换行符
\r 回车符
\s 空白字符
\S 非空白字符
\t 制表符
\v 垂直制表符
\w 匹配字母数字下划线
\W 匹配非字母数字下划线
\xn 匹配n n为十六进制数字
\num 匹配num num是一个正整数
\n 标识一个八进制或者一个向后引用
\nm
\uml
\un 匹配n n是Unicode

运算符优先级
\  ()  (?:)  (?=)  []  *  +  ?  {n}  {n,}  {n,m}  ^  $  \任何元字符、任何字符  |



正则表达式中常用的模式修正符有i、g、m、s、x、e等。它们之间可以组合搭配使用。
它们的作用如下：
//修正符:i 不区分大小写的匹配;

//如:"/abc/i"可以与abc或aBC或ABc等匹配;
//修正符：g表示全局匹配

//修正符:m 将字符串视为多行,不管是那行都能匹配;

例://模式为:$mode="/abc/m";
//要匹配的字符串为:$str="bcefg5e\nabcdfe"
//注意其中\n,换行了;abc换到了下一行;
//$str和$mode仍可以匹配,修正符m使得多行也可匹配;
//修正符:s 将字符串视为单行,换行符作为普通字符;

例://模式为:$mode="/pr.y/";
//要匹配字符串为:$str="pr\ny";
//两者不可匹配; . 是除了换行以外的字符可匹配;
//修改下模式为:$mode="/pr.y/s";
//其中修正符s将\n视为普通字符,即不是换行;
//最后两者可以匹配;
//修正符:x 将模式中的空白忽略;
//修正符:A 强制从目标字符串开头匹配;

例://$mode="/abc/A";
//可以与$str="abcsdfi"匹配,
//不可以与$str2="sdsdabc"匹配;
//因为$str2不是以abc开头;
//修正符:D 如果使用$限制结尾字符,则不允许结尾有换行;

例://模式为:$mode="/abc$/";
//可以与最后有换行的$str="adshabc\n"匹配;
//元子符$会忽略最后的换行\n;
//如果模式为:$mode="/abc/D",
//则不能与$str="adshabc\n"匹配,
//修正符D限制其不可有换行;必需以abc结尾;
//修正符:U 只匹配最近的一个字符串;不重复匹配;

例:
如模式为:
$mode="/a.*c/";
$str="abcabbbcabbbbbc" ;
preg_match($mode,$str,$content);
echo $content[0]; //输出:abcabbbcabbbbbc;

//如果$mode="/a.*c/";变成$mode="/a.*c/U";
// 则只匹配最近一个字符串,输出:abc;

//修正符:e 配合函数preg_replace()使用,
可以把匹配来的字符串当作正则表达式执行;